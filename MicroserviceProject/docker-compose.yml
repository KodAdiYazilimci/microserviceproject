version: '3.4'

services:
  mongo:
    image: mongo:latest
    container_name: mongo
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
    # command: [mongod,--auth]
    ports:
      - 27017:27017
    volumes:
      # - mongoVol:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo-js:ro
      - './volumes/mongoVol:/data/db'
    networks:
      - internal
    # entrypoint: [ "/usr/bin/mongod"]
  redis:
    image: 'redis/redis-stack-server'
    container_name: redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - 6379:6379
    networks:
      - internal
  mssql:
    container_name: sql-server
    image: mcr.microsoft.com/mssql/server:2017-latest
    #image: mcr.microsoft.com/mssql/server:2017-CU11-ubuntu
    restart: always
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "Srkn_CMR*1987"
    ports:
      - 1433:1433
    volumes:
      - dbVolume:/var/opt/mssql
    networks:
      - internal
  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq-1
    hostname: "rabbit1"
    environment:
      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "rabbitmq"
      RABBITMQ_DEFAULT_VHOST: "/"
    ports:
      - "15672:15672"
      - "5672:5672"
    labels:
      NAME: "rabbitmq1"
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
      #- "./rabbitmq.config:/etc/rabbitmq/rabbitmq.config:ro"
      #- "./autocluster-0.4.1.ez:/usr/lib/rabbitmq/lib/rabbitmq_server-3.5.5/plugins/autocluster-0.4.1.ez"
    networks:
      - internal
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
    # 8.x
    environment: ['CLI_JAVA_OPTS=-Xms2g -Xmx2g','bootstrap.memory_lock=true','discovery.type=single-node','xpack.security.enabled=false', 'xpack.security.enrollment.enabled=false']
    ports:
      - 9200:9200
    networks:
      - internal
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    deploy:    
      resources:
          limits:
            cpus: '2.0'
          reservations:
            cpus: '1.0'
  kibana:
    image: docker.elastic.co/kibana/kibana:8.7.1
    container_name: kibana
    environment:
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: d1a66dfd-c4d3-4a0a-8290-2abcb83ab3aa
    ports:
      - 5601:5601
    networks:
      - internal
    deploy:    
      resources:
          limits:
            cpus: '2.0'
          reservations:
            cpus: '1.0'
  services.api.servicediscovery:
    image: ${DOCKER_REGISTRY-}servicesapiservicediscovery
    container_name: services.api.servicediscovery
    ports:
     - 58699:8080
    build:
      context: .
      dockerfile: Services.Api.ServiceDiscovery/Dockerfile
    networks:
     - internal
  services.api.authorization:
    image: ${DOCKER_REGISTRY-}servicesapiauthorization
    container_name: services.api.authorization
    ports:
     - 15455:8080
    build:
      context: .
      dockerfile: Services.Api.Authorization/Dockerfile
    networks:
     - internal
    depends_on:
      - mssql
      - services.api.servicediscovery
  services.api.logging:
    image: ${DOCKER_REGISTRY-}servicesapilogging
    container_name: services.api.logging
    ports:
     - 15456:8080
    build:
      context: .
      dockerfile: Services.Api.Logging/Dockerfile
    networks:
     - internal
    depends_on:
      - mssql
      - services.api.servicediscovery
      - services.api.authorization 
  services.api.gateway.public:
    image: ${DOCKER_REGISTRY-}servicesapigatewaypublic
    container_name: services.api.gateway.public
    ports:
     - 20200:8080
    build:
      context: .
      dockerfile: Services.Api.Gateway.Public/Dockerfile
    networks:
     - internal
    depends_on:
      - services.api.servicediscovery
      - services.api.authorization 
  services.api.business.departments.hr:
    image: ${DOCKER_REGISTRY-}servicesapibusinessdepartmentshr
    container_name: services.api.business.departments.hr
    ports:
     - 26920:8080 
    build:
      context: .
      dockerfile: Services.Api.Business.Departments.HR/Dockerfile
    networks:
     - internal
    depends_on:
      - mssql
      - services.api.servicediscovery
      - services.api.authorization 
  presentation.ui.web.identity:
    image: ${DOCKER_REGISTRY-}presentationuiwebidentity
    container_name: presentation.ui.web.identity
    ports:
     - 31636:8080 
    build:
      context: .
      dockerfile: Presentation.UI.Web.Identity/Dockerfile
    networks:
     - internal
    depends_on:
      - services.api.servicediscovery
      - services.api.authorization 
  presentation.ui.web:
    image: ${DOCKER_REGISTRY-}presentationuiweb
    container_name: presentation.ui.web
    ports:
     - 8501:8080
    build:
      context: .
      dockerfile: Presentation.UI.Web/Dockerfile
    networks:
     - internal
    depends_on:
      - services.api.servicediscovery
      - services.api.authorization
      - services.api.gateway.public
  services.api.business.departments.aa:
    image: ${DOCKER_REGISTRY-}servicesapibusinessdepartmentsaa
    container_name: services.api.business.departments.aa
    ports:
     - 34308:8080
    build:
      context: .
      dockerfile: Services.Api.Business.Departments.AA/Dockerfile
    networks:
     - internal
    depends_on:
      - mssql
      - services.api.servicediscovery
      - services.api.authorization 
  services.api.business.departments.accounting:
    image: ${DOCKER_REGISTRY-}servicesapibusinessdepartmentsaccounting
    container_name: services.api.business.departments.accounting
    ports:
     - 30775:8080
    build:
      context: .
      dockerfile: Services.Api.Business.Departments.Accounting/Dockerfile
    networks:
     - internal
    depends_on:
      - mssql
      - services.api.servicediscovery
      - services.api.authorization 
  services.api.business.departments.buying:
    image: ${DOCKER_REGISTRY-}servicesapibusinessdepartmentsbuying
    container_name: services.api.business.departments.buying
    ports:
     - 26558:8080 
    build:
      context: .
      dockerfile: Services.Api.Business.Departments.Buying/Dockerfile
    networks:
     - internal
    depends_on:
      - mssql
      - services.api.servicediscovery
      - services.api.authorization 
  services.api.business.departments.cr:
    image: ${DOCKER_REGISTRY-}servicesapibusinessdepartmentscr
    container_name: services.api.business.departments.cr
    # ports:
    #  - 60403:8080
    build:
      context: .
      dockerfile: Services.Api.Business.Departments.CR/Dockerfile
    networks:
     - internal
    depends_on:
      - mssql
      - services.api.servicediscovery
      - services.api.authorization
  services.api.business.departments.finance:
    image: ${DOCKER_REGISTRY-}servicesapibusinessdepartmentsfinance
    container_name: services.api.business.departments.finance
    ports:
     - 32355:8080
    build:
      context: .
      dockerfile: Services.Api.Business.Departments.Finance/Dockerfile
    networks:
     - internal
    depends_on:
      - mssql
      - services.api.servicediscovery
      - services.api.authorization 
  services.api.business.departments.it:
    image: ${DOCKER_REGISTRY-}servicesapibusinessdepartmentsit
    container_name: services.api.business.departments.it
    ports:
     - 65390:8080
    build:
      context: .
      dockerfile: Services.Api.Business.Departments.IT/Dockerfile
    networks:
     - internal
    depends_on:
      - mssql
      - services.api.servicediscovery
      - services.api.authorization 
  services.api.business.departments.production:
    image: ${DOCKER_REGISTRY-}servicesapibusinessdepartmentsproduction
    container_name: services.api.business.departments.production
    ports:
     - 9311:8080
    build:
      context: .
      dockerfile: Services.Api.Business.Departments.Production/Dockerfile
    networks:
     - internal
    depends_on:
      - mssql
      - services.api.servicediscovery
      - services.api.authorization 
  services.api.business.departments.selling:
    image: ${DOCKER_REGISTRY-}servicesapibusinessdepartmentsselling
    container_name: services.api.business.departments.selling
    ports:
     - 5139:8080
    build:
      context: .
      dockerfile: Services.Api.Business.Departments.Selling/Dockerfile
    networks:
     - internal
    depends_on:
      - mssql
      - services.api.servicediscovery
      - services.api.authorization 
  services.api.business.departments.storage:
    image: ${DOCKER_REGISTRY-}servicesapibusinessdepartmentsstorage
    container_name: services.api.business.departments.storage
    ports:
     - 58984:8080
    build:
      context: .
      dockerfile: Services.Api.Business.Departments.Storage/Dockerfile
    networks:
     - internal
    depends_on:
      - mssql
      - services.api.servicediscovery
      - services.api.authorization 
  services.mq.authorization:
    image: ${DOCKER_REGISTRY-}servicesmqauthorization
    container_name: services.mq.authorization
    build:
      context: .
      dockerfile: Services.MQ.Authorization/Dockerfile
    networks:
      - internal
    depends_on:
      - services.api.servicediscovery
      - services.api.authorization 
  services.mq.buying:
    image: ${DOCKER_REGISTRY-}servicesmqbuying
    container_name: services.mq.buying
    build:
      context: .
      dockerfile: Services.MQ.Buying/Dockerfile
    networks:
      - internal
    depends_on:
      - services.api.servicediscovery
      - services.api.authorization 
  services.mq.accounting:
    image: ${DOCKER_REGISTRY-}servicesmqaccounting
    container_name: services.mq.accounting
    build:
      context: .
      dockerfile: Services.MQ.Accounting/Dockerfile
    networks:
      - internal
    depends_on:
      - services.api.servicediscovery
      - services.api.authorization 
  services.mq.aa:
    image: ${DOCKER_REGISTRY-}servicesmqaa
    container_name: services.mq.aa
    build:
      context: .
      dockerfile: Services.MQ.AA/Dockerfile
    networks:
      - internal
    depends_on:
      - services.api.servicediscovery
      - services.api.authorization 
  services.mq.finance:
    image: ${DOCKER_REGISTRY-}servicesmqfinance
    container_name: services.mq.finance
    build:
      context: .
      dockerfile: Services.MQ.Finance/Dockerfile
    networks:
      - internal
    depends_on:
      - services.api.servicediscovery
      - services.api.authorization 
  services.mq.it:
    image: ${DOCKER_REGISTRY-}servicesmqit
    container_name: services.mq.it
    build:
      context: .
      dockerfile: Services.MQ.IT/Dockerfile
    networks:
      - internal
    depends_on:
      - services.api.servicediscovery
      - services.api.authorization 
  services.mq.production:
    image: ${DOCKER_REGISTRY-}servicesmqproduction
    container_name: services.mq.production
    build:
      context: .
      dockerfile: Services.MQ.Production/Dockerfile
    networks:
      - internal
    depends_on:
      - services.api.servicediscovery
      - services.api.authorization 
  services.mq.selling:
    image: ${DOCKER_REGISTRY-}servicesmqselling
    container_name: services.mq.selling
    build:
      context: .
      dockerfile: Services.MQ.Selling/Dockerfile
    networks:
      - internal
    depends_on:
      - services.api.servicediscovery
      - services.api.authorization 
  services.mq.storage:
    image: ${DOCKER_REGISTRY-}servicesmqstorage
    container_name: services.mq.storage
    build:
      context: .
      dockerfile: Services.MQ.Storage/Dockerfile
    networks:
      - internal
    depends_on:
      - services.api.servicediscovery
      - services.api.authorization 
networks:
  internal:
   driver: bridge

volumes:
  dbVolume:
  mongoVol: